/*
 * ----------------------------------------------------------------------------
 *  File:        weights.rs
 *  Project:     Celaya Solutions (C-Suite Blockchain)
 *  Created by:  Celaya Solutions, 2025
 *  Author:      Christopher Celaya <chris@celayasolutions.com>
 *  Description: Weight implementations for Consensus Log pallet
 *  Version:     1.0.0
 *  License:     BSL (SPDX id BUSL)
 *  Last Update: (May 2025)
 * ----------------------------------------------------------------------------
 */

//! Autogenerated weights for `pallet_consensus_log`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `runner-e8ezs4ez-project-145-concurrent-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_consensus_log
// --no-storage-info
// --no-median-slopes
// --no-min-squares
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/consensus/src/weights.rs
// --header=./HEADER-APACHE2
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame::deps::frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_consensus_log`.
pub trait WeightInfo {
    fn submit_consensus_log() -> Weight;
    fn sign_consensus_log() -> Weight;
    fn finalize_consensus_log() -> Weight;
}

/// Weights for `pallet_consensus_log` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame::deps::frame_system::Config> WeightInfo for SubstrateWeight<T> {
    /// Storage: `ConsensusLog::ConsensusLogs` (r:1 w:1)
    /// Proof: `ConsensusLog::ConsensusLogs` (`max_values`: None, `max_size`: Some(2000), added: 4475, mode: `MaxEncodedLen`)
    /// Storage: `AgentRegistry::Agents` (r:10 w:0)
    /// Proof: `AgentRegistry::Agents` (`max_values`: None, `max_size`: Some(1000), added: 3475, mode: `MaxEncodedLen`)
    fn submit_consensus_log() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1000`
        //  Estimated: `35225`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(35_000_000, 35225)
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }

    /// Storage: `ConsensusLog::ConsensusLogs` (r:1 w:1)
    /// Proof: `ConsensusLog::ConsensusLogs` (`max_values`: None, `max_size`: Some(2000), added: 4475, mode: `MaxEncodedLen`)
    /// Storage: `AgentRegistry::Agents` (r:1 w:1)
    /// Proof: `AgentRegistry::Agents` (`max_values`: None, `max_size`: Some(1000), added: 3475, mode: `MaxEncodedLen`)
    fn sign_consensus_log() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `800`
        //  Estimated: `7940`
        // Minimum execution time: 20_000_000 picoseconds.
        Weight::from_parts(28_000_000, 7940)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }

    /// Storage: `ConsensusLog::ConsensusLogs` (r:1 w:1)
    /// Proof: `ConsensusLog::ConsensusLogs` (`max_values`: None, `max_size`: Some(2000), added: 4475, mode: `MaxEncodedLen`)
    fn finalize_consensus_log() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `800`
        //  Estimated: `4465`
        // Minimum execution time: 15_000_000 picoseconds.
        Weight::from_parts(22_000_000, 4465)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests.
impl WeightInfo for () {
    fn submit_consensus_log() -> Weight {
        Weight::from_parts(35_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(11_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    fn sign_consensus_log() -> Weight {
        Weight::from_parts(28_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    fn finalize_consensus_log() -> Weight {
        Weight::from_parts(22_000_000, 0)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
} 