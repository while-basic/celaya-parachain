// ----------------------------------------------------------------------------
//  File:        useApi.ts
//  Project:     Celaya Solutions (C-Suite Dashboard)
//  Created by:  Celaya Solutions, 2025
//  Author:      Christopher Celaya <chris@celayasolutions.com>
//  Description: React hook for connecting to the C-Suite blockchain via Polkadot API
//  Version:     1.0.0
//  License:     BSL (SPDX id BUSL)
//  Last Update: May 2025
// ----------------------------------------------------------------------------

import { useState, useEffect, useCallback } from 'react';
import { ApiPromise, WsProvider } from '@polkadot/api';

interface UseApiReturn {
  api: ApiPromise | null;
  isConnected: boolean;
  isLoading: boolean;
  error: string | null;
  connect: () => Promise<void>;
  disconnect: () => void;
}

// Updated to connect to zombienet parachain by default
const DEFAULT_ENDPOINT = 'ws://localhost:9988'; // C-Suite parachain (zombienet)
// const RELAY_ENDPOINT = 'ws://localhost:9944';   // Relay chain Alice (zombienet) 
// const STANDALONE_ENDPOINT = 'ws://localhost:9944'; // Standalone mode

const MAX_RETRY_ATTEMPTS = 3;
const RETRY_DELAY = 5000; // 5 seconds

export const useApi = (endpoint: string = DEFAULT_ENDPOINT): UseApiReturn => {
  const [api, setApi] = useState<ApiPromise | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState(0);
  const [isClient, setIsClient] = useState(false);

  // Prevent hydration issues by only running on client
  useEffect(() => {
    setIsClient(true);
  }, []);

  const connect = useCallback(async () => {
    if (!isClient || (api && isConnected) || retryCount >= MAX_RETRY_ATTEMPTS) return;

    setIsLoading(true);
    setError(null);

    try {
      const provider = new WsProvider(endpoint, false); // Set auto-connect to false
      const apiInstance = await ApiPromise.create({ 
        provider,
        throwOnConnect: true 
      });

      // Wait for the API to be ready
      await apiInstance.isReady;

      setApi(apiInstance);
      setIsConnected(true);
      setRetryCount(0); // Reset retry count on successful connection
      
      console.log('âœ… Connected to C-Suite blockchain:', {
        endpoint,
        chainName: apiInstance.runtimeChain.toString(),
        nodeName: apiInstance.runtimeVersion.specName.toString(),
        nodeVersion: apiInstance.runtimeVersion.specVersion.toString(),
      });

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to connect to blockchain';
      setError(errorMessage);
      setRetryCount(prev => prev + 1);
      
      // Only log error once per retry cycle to avoid spam
      if (retryCount === 0) {
        console.warn('ðŸ”Œ Cannot connect to C-Suite parachain at ws://localhost:9988');
        console.warn('ðŸ’¡ Start zombienet with: cd .. && ./c-suite-blockchain.sh zombienet');
        console.warn('ðŸ“Š Using mock data for development');
      }
      
      // Schedule retry with exponential backoff if under max attempts
      if (retryCount < MAX_RETRY_ATTEMPTS - 1) {
        setTimeout(() => {
          if (isClient && !isConnected) {
            connect();
          }
        }, RETRY_DELAY * Math.pow(2, retryCount));
      }
    } finally {
      setIsLoading(false);
    }
  }, [endpoint, api, isConnected, retryCount, isClient]);

  const disconnect = useCallback(() => {
    if (api) {
      api.disconnect();
      setApi(null);
      setIsConnected(false);
      setError(null);
      setRetryCount(0);
    }
  }, [api]);

  // Auto-connect on client mount only
  useEffect(() => {
    if (isClient && !api && retryCount === 0) {
      connect();
    }

    // Cleanup on unmount
    return () => {
      if (api) {
        api.disconnect();
      }
    };
  }, [isClient]); // Remove connect from dependencies to prevent infinite loops

  return {
    api,
    isConnected,
    isLoading,
    error,
    connect,
    disconnect,
  };
};

// Helper function for direct API creation without hook
export const createApi = async (endpoint: string = DEFAULT_ENDPOINT): Promise<ApiPromise> => {
  const provider = new WsProvider(endpoint);
  const api = await ApiPromise.create({ provider });
  await api.isReady;
  return api;
};

// Types for common blockchain queries
export interface AgentInfo {
  id: string;
  owner: string;
  trustScore: number;
  metadata: Record<string, unknown>;
  isActive: boolean;
}

export interface ConsensusLog {
  id: string;
  agentId: string;
  timestamp: number;
  data: string;
  signatures: string[];
}

export interface InsightRecord {
  cid: string;
  agentId: string;
  timestamp: number;
  verified: boolean;
} 