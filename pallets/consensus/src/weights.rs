/*
 * ----------------------------------------------------------------------------
 *  File:        weights.rs
 *  Project:     Celaya Solutions (C-Suite Blockchain)
 *  Created by:  Celaya Solutions, 2025
 *  Author:      Christopher Celaya <chris@celayasolutions.com>
 *  Description: Weight implementations for the consensus log pallet
 *  Version:     1.0.0
 *  License:     BSL (SPDX id BUSL)
 *  Last Update: (May 2025)
 * ----------------------------------------------------------------------------
 */

//! Autogenerated weights for pallet_consensus_log
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2025-05-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `benchmark-machine`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/parachain-template
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_consensus_log
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/consensus/src/weights.rs
// --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions for pallet_consensus_log.
pub trait WeightInfo {
    fn submit_insight() -> Weight;
    fn log_consensus() -> Weight;
    fn sign_log() -> Weight;
}

/// Weights for pallet_consensus_log using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    // Storage: AgentRegistry Agents (r:1 w:0)
    // Storage: ConsensusLog Logs (r:1 w:1)
    // Storage: System Account (r:1 w:0)
    // Storage: ConsensusLog LogsByAgent (r:1 w:1)
    // Storage: ConsensusLog LogsByCID (r:1 w:1)
    fn submit_insight() -> Weight {
        Weight::from_parts(35_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    
    // Storage: AgentRegistry Agents (r:3 w:0)
    // Storage: ConsensusLog Logs (r:1 w:1)
    // Storage: System Account (r:1 w:0)
    // Storage: ConsensusLog LogsByAgent (r:2 w:2)
    // Storage: ConsensusLog LogsByCID (r:1 w:1)
    fn log_consensus() -> Weight {
        Weight::from_parts(45_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    
    // Storage: AgentRegistry Agents (r:1 w:0)
    // Storage: ConsensusLog Logs (r:1 w:1)
    fn sign_log() -> Weight {
        Weight::from_parts(25_000_000, 0)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
} 